{"ast":null,"code":"var _jsxFileName = \"/home/suman/react-projects/redux/my-bookstore/src/container/AdminContainers/AdminMainContainer/AdminMainContainer.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Route, Switch } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport BookList from '../BookList/BookList';\nimport BookForm from '../BookForm/BooksForm';\nimport CategoryFilter from '../../../components/CategoryFilter/CategoryFilter';\nimport { category, bookStatus } from '../../../utilities/utility';\nimport { removeBook, filterBooks } from '../../../actions/index';\n\nconst adminMainContainer = props => {\n  const filteredBooks = () => {\n    const {\n      filter,\n      books\n    } = props;\n    let updatedBooks;\n\n    if (filter === 'All') {\n      updatedBooks = books;\n    } else {\n      updatedBooks = books.filter(book => book.category === filter);\n    }\n\n    return updatedBooks;\n  };\n\n  const {\n    books,\n    deleteBook,\n    categoryFilter\n  } = props;\n  return /*#__PURE__*/React.createElement(\"main\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CategoryFilter, {\n    bookCategories: category,\n    categoryHandler: filteredCategory => categoryFilter(filteredCategory),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Switch, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Route, {\n    path: \"/auth/new-book\",\n    exact: true,\n    render: props => /*#__PURE__*/React.createElement(BookForm, {\n      bookCondition: bookStatus,\n      categories: category,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 63\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    path: \"/auth\",\n    exact: true,\n    render: props => /*#__PURE__*/React.createElement(BookList, Object.assign({}, props, {\n      deleteBook: deleteBook,\n      availableBooks: books,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 54\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  })));\n};\n\nconst mapStateToProps = state => ({\n  books: state.books,\n  filter: state.filter\n});\n\nconst mapDispatchToProps = dispatch => ({\n  deleteBook: data => {\n    dispatch(removeBook(data));\n  },\n  categoryFilter: category => {\n    dispatch(filterBooks(category));\n  }\n});\n\nadminMainContainer.propTypes = {\n  books: PropTypes.instanceOf(Array).isRequired,\n  deleteBook: PropTypes.func.isRequired,\n  categoryFilter: PropTypes.func.isRequired,\n  filter: PropTypes.string.isRequired\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(adminMainContainer);","map":{"version":3,"sources":["/home/suman/react-projects/redux/my-bookstore/src/container/AdminContainers/AdminMainContainer/AdminMainContainer.js"],"names":["React","connect","Route","Switch","PropTypes","BookList","BookForm","CategoryFilter","category","bookStatus","removeBook","filterBooks","adminMainContainer","props","filteredBooks","filter","books","updatedBooks","book","deleteBook","categoryFilter","filteredCategory","mapStateToProps","state","mapDispatchToProps","dispatch","data","propTypes","instanceOf","Array","isRequired","func","string"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { Route, Switch } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport BookList from '../BookList/BookList';\nimport BookForm from '../BookForm/BooksForm';\nimport CategoryFilter from '../../../components/CategoryFilter/CategoryFilter';\nimport { category, bookStatus } from '../../../utilities/utility';\nimport { removeBook, filterBooks } from '../../../actions/index';\n\nconst adminMainContainer = props => {\n  const filteredBooks = () => {\n    const { filter, books } = props;\n    let updatedBooks;\n    if (filter === 'All') {\n      updatedBooks = books;\n    } else {\n      updatedBooks = books.filter(book => book.category === filter);\n    }\n    return updatedBooks;\n  };\n  const { books, deleteBook, categoryFilter } = props;\n  return (\n    <main>\n      <CategoryFilter\n        bookCategories={category}\n        categoryHandler={filteredCategory => categoryFilter(filteredCategory)}\n      />\n      <Switch>\n        <Route path=\"/auth/new-book\" exact render={(props) => <BookForm bookCondition={bookStatus} categories={category} />} />\n        <Route path=\"/auth\" exact render={(props) => <BookList {...props} deleteBook={deleteBook} availableBooks={books} />} />\n      </Switch>\n    </main>\n  );\n};\n\n\nconst mapStateToProps = state => ({\n  books: state.books,\n  filter: state.filter,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  deleteBook: data => { dispatch(removeBook(data)); },\n  categoryFilter: category => { dispatch(filterBooks(category)); },\n});\n\n\nadminMainContainer.propTypes = {\n  books: PropTypes.instanceOf(Array).isRequired,\n  deleteBook: PropTypes.func.isRequired,\n  categoryFilter: PropTypes.func.isRequired,\n  filter: PropTypes.string.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(adminMainContainer);\n"]},"metadata":{},"sourceType":"module"}