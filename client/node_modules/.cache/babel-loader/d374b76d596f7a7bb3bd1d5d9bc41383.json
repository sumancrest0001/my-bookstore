{"ast":null,"code":"var _jsxFileName = \"/home/suman/react-projects/redux/my-bookstore/src/container/AdminContainers/AdminMainContainer/AdminMainContainer.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport BookList from '../BookList/BookList';\nimport BookForm from '../BookForm/BooksForm';\nimport CategoryFilter from '../../../components/CategoryFilter/CategoryFilter';\nimport { category, bookStatus } from '../../../utilities/utility';\nimport { removeBook, filterBooks } from '../../../redux/actions/index';\n\nclass AdminMainContainer extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.filteredBooks = () => {\n      const {\n        books,\n        filter\n      } = this.props;\n      let updatedBooks;\n\n      if (filter === 'All') {\n        updatedBooks = books;\n      } else {\n        updatedBooks = books.filter(book => book.category === filter);\n      }\n\n      return updatedBooks;\n    };\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return this.props.adminStatus !== nextProps.adminStatus;\n  }\n\n  render() {\n    const {\n      adminStatus,\n      categoryFilter,\n      deleteBook,\n      books\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"main\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 7\n      }\n    }, adminStatus ? '' : /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/signin\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 29\n      }\n    }), console.log(adminStatus), /*#__PURE__*/React.createElement(CategoryFilter, {\n      bookCategories: category,\n      categoryHandler: filteredCategory => categoryFilter(filteredCategory),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Switch, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      path: \"/auth/new-book\",\n      exact: true,\n      render: () => /*#__PURE__*/React.createElement(BookForm, {\n        bookCondition: bookStatus,\n        categories: category,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 60\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/auth\",\n      exact: true,\n      render: () => /*#__PURE__*/React.createElement(BookList, {\n        deleteBook: deleteBook,\n        availableBooks: books,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 51\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  books: state.books,\n  adminStatus: state.user.admin\n});\n\nconst mapDispatchToProps = dispatch => ({\n  deleteBook: data => {\n    dispatch(removeBook(data));\n  },\n  categoryFilter: category => {\n    dispatch(filterBooks(category));\n  }\n});\n\nAdminMainContainer.propTypes = {\n  books: PropTypes.instanceOf(Array).isRequired,\n  deleteBook: PropTypes.func.isRequired,\n  categoryFilter: PropTypes.func.isRequired,\n  filter: PropTypes.string.isRequired\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(AdminMainContainer);","map":{"version":3,"sources":["/home/suman/react-projects/redux/my-bookstore/src/container/AdminContainers/AdminMainContainer/AdminMainContainer.js"],"names":["React","Component","connect","Route","Switch","Redirect","PropTypes","BookList","BookForm","CategoryFilter","category","bookStatus","removeBook","filterBooks","AdminMainContainer","filteredBooks","books","filter","props","updatedBooks","book","shouldComponentUpdate","nextProps","nextState","adminStatus","render","categoryFilter","deleteBook","console","log","filteredCategory","mapStateToProps","state","user","admin","mapDispatchToProps","dispatch","data","propTypes","instanceOf","Array","isRequired","func","string"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport BookList from '../BookList/BookList';\nimport BookForm from '../BookForm/BooksForm';\nimport CategoryFilter from '../../../components/CategoryFilter/CategoryFilter';\nimport { category, bookStatus } from '../../../utilities/utility';\nimport { removeBook, filterBooks } from '../../../redux/actions/index';\n\nclass AdminMainContainer extends Component {\n  shouldComponentUpdate(nextProps, nextState) {\n    return this.props.adminStatus !== nextProps.adminStatus;\n  }\n\n  filteredBooks = () => {\n    const { books, filter } = this.props;\n    let updatedBooks;\n    if (filter === 'All') {\n      updatedBooks = books;\n    } else {\n      updatedBooks = books.filter(book => book.category === filter);\n    }\n    return updatedBooks;\n  };\n\n  render() {\n    const { adminStatus, categoryFilter, deleteBook, books } = this.props;\n    return (\n      <main>\n        {adminStatus ? '' : <Redirect to=\"/signin\" />}\n        {console.log(adminStatus)}\n        <CategoryFilter\n          bookCategories={category}\n          categoryHandler={filteredCategory => categoryFilter(filteredCategory)}\n        />\n        <Switch>\n          <Route path=\"/auth/new-book\" exact render={() => <BookForm bookCondition={bookStatus} categories={category} />} />\n          <Route path=\"/auth\" exact render={() => <BookList deleteBook={deleteBook} availableBooks={books} />} />\n        </Switch>\n      </main>\n    );\n  }\n}\n\n\nconst mapStateToProps = state => ({\n  books: state.books,\n  adminStatus: state.user.admin,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  deleteBook: data => { dispatch(removeBook(data)); },\n  categoryFilter: category => { dispatch(filterBooks(category)); },\n});\n\n\nAdminMainContainer.propTypes = {\n  books: PropTypes.instanceOf(Array).isRequired,\n  deleteBook: PropTypes.func.isRequired,\n  categoryFilter: PropTypes.func.isRequired,\n  filter: PropTypes.string.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AdminMainContainer);\n"]},"metadata":{},"sourceType":"module"}