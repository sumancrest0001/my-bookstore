{"ast":null,"code":"var _jsxFileName = \"/home/suman/react-projects/redux/my-bookstore/src/container/AdminContainers/AdminMainContainer/AdminMainContainer.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Route, Switch } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport BookList from '../BookList/BookList';\nimport BookForm from '../BookForm/BooksForm';\nimport CategoryFilter from '../../../components/CategoryFilter/CategoryFilter';\nimport { category, bookStatus } from '../../../utilities/utility';\nimport { removeBook, filterBooks } from '../../../actions/index';\n\nclass AdminMainContainer extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.filteredBooks = () => {\n      const {\n        filter,\n        books\n      } = this.props;\n      let updatedBooks;\n\n      if (filter === 'All') {\n        updatedBooks = books;\n      } else {\n        updatedBooks = books.filter(book => book.category === filter);\n      }\n\n      return updatedBooks;\n    };\n  }\n\n  render() {\n    const {\n      books,\n      deleteBook,\n      categoryFilter\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"main\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(CategoryFilter, {\n      bookCategories: category,\n      categoryHandler: filteredCategory => categoryFilter(filteredCategory),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Switch, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      path: \"/auth\",\n      exact: true,\n      render: props => /*#__PURE__*/React.createElement(BookList, Object.assign({}, props, {\n        deleteBook: deleteBook,\n        availableBooks: books,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 56\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/new-book\",\n      exact: true,\n      render: props => /*#__PURE__*/React.createElement(BookForm, {\n        bookCondition: bookStatus,\n        categories: category,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 60\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  books: state.books,\n  filter: state.filter\n});\n\nconst mapDispatchToProps = dispatch => ({\n  deleteBook: data => {\n    dispatch(removeBook(data));\n  },\n  categoryFilter: category => {\n    dispatch(filterBooks(category));\n  }\n});\n\nAdminMainContainer.propTypes = {\n  books: PropTypes.instanceOf(Array).isRequired,\n  deleteBook: PropTypes.func.isRequired,\n  categoryFilter: PropTypes.func.isRequired,\n  filter: PropTypes.string.isRequired\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(AdminMainContainer);","map":{"version":3,"sources":["/home/suman/react-projects/redux/my-bookstore/src/container/AdminContainers/AdminMainContainer/AdminMainContainer.js"],"names":["React","Component","connect","Route","Switch","PropTypes","BookList","BookForm","CategoryFilter","category","bookStatus","removeBook","filterBooks","AdminMainContainer","filteredBooks","filter","books","props","updatedBooks","book","render","deleteBook","categoryFilter","filteredCategory","mapStateToProps","state","mapDispatchToProps","dispatch","data","propTypes","instanceOf","Array","isRequired","func","string"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Route, Switch } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport BookList from '../BookList/BookList';\nimport BookForm from '../BookForm/BooksForm';\nimport CategoryFilter from '../../../components/CategoryFilter/CategoryFilter';\nimport { category, bookStatus } from '../../../utilities/utility';\nimport { removeBook, filterBooks } from '../../../actions/index';\n\nclass AdminMainContainer extends Component {\n  filteredBooks = () => {\n    const { filter, books } = this.props;\n    let updatedBooks;\n    if (filter === 'All') {\n      updatedBooks = books;\n    } else {\n      updatedBooks = books.filter(book => book.category === filter);\n    }\n    return updatedBooks;\n  };\n\n  render() {\n    const { books, deleteBook, categoryFilter } = this.props;\n    return (\n      <main>\n        <CategoryFilter\n          bookCategories={category}\n          categoryHandler={filteredCategory => categoryFilter(filteredCategory)}\n        />\n        <Switch>\n          <Route path=\"/auth\" exact render={(props) => <BookList {...props} deleteBook={deleteBook} availableBooks={books} />} />\n          <Route path=\"/new-book\" exact render={(props) => <BookForm bookCondition={bookStatus} categories={category} />} />\n        </Switch>\n      </main>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  books: state.books,\n  filter: state.filter,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  deleteBook: data => { dispatch(removeBook(data)); },\n  categoryFilter: category => { dispatch(filterBooks(category)); },\n});\n\n\nAdminMainContainer.propTypes = {\n  books: PropTypes.instanceOf(Array).isRequired,\n  deleteBook: PropTypes.func.isRequired,\n  categoryFilter: PropTypes.func.isRequired,\n  filter: PropTypes.string.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AdminMainContainer);\n"]},"metadata":{},"sourceType":"module"}