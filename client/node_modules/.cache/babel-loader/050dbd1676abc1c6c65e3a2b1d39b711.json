{"ast":null,"code":"var _jsxFileName = \"/home/suman/react-projects/redux/my-bookstore/src/container/AdminContainers/AdminMainContainer/AdminMainContainer.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Route, Switch } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport BookList from '../BookList/BookList';\nimport BookForm from '../BookForm/BooksForm';\nimport CategoryFilter from '../../../components/CategoryFilter/CategoryFilter';\nimport { category, bookStatus } from '../../../utilities/utility';\nimport { removeBook, filterBooks } from '../../../actions/index';\n\nconst adminMainContainer = props => {\n  const {\n    books,\n    deleteBook,\n    filter,\n    categoryFilter\n  } = props;\n\n  const filteredBooks = () => {\n    let updatedBooks;\n\n    if (filter === 'All') {\n      updatedBooks = books;\n    } else {\n      updatedBooks = books.filter(book => book.category === filter);\n    }\n\n    return updatedBooks;\n  };\n\n  let componentToRender = /*#__PURE__*/React.createElement(Redirect, {\n    to: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 27\n    }\n  });\n\n  if (props.admin) {\n    componentToRender = /*#__PURE__*/React.createElement(\"main\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(CategoryFilter, {\n      bookCategories: category,\n      categoryHandler: filteredCategory => categoryFilter(filteredCategory),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Switch, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      path: \"/auth/new-book\",\n      exact: true,\n      render: () => /*#__PURE__*/React.createElement(BookForm, {\n        bookCondition: bookStatus,\n        categories: category,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 60\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/auth\",\n      exact: true,\n      render: () => /*#__PURE__*/React.createElement(BookList, {\n        deleteBook: deleteBook,\n        availableBooks: books,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 51\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }\n    })));\n  }\n\n  return {\n    componentToRender\n  };\n};\n\nconst mapStateToProps = state => ({\n  books: state.books,\n  filter: state.filter\n});\n\nconst mapDispatchToProps = dispatch => ({\n  deleteBook: data => {\n    dispatch(removeBook(data));\n  },\n  categoryFilter: category => {\n    dispatch(filterBooks(category));\n  }\n});\n\nadminMainContainer.propTypes = {\n  books: PropTypes.instanceOf(Array).isRequired,\n  deleteBook: PropTypes.func.isRequired,\n  categoryFilter: PropTypes.func.isRequired,\n  filter: PropTypes.string.isRequired\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(adminMainContainer);","map":{"version":3,"sources":["/home/suman/react-projects/redux/my-bookstore/src/container/AdminContainers/AdminMainContainer/AdminMainContainer.js"],"names":["React","connect","Route","Switch","PropTypes","BookList","BookForm","CategoryFilter","category","bookStatus","removeBook","filterBooks","adminMainContainer","props","books","deleteBook","filter","categoryFilter","filteredBooks","updatedBooks","book","componentToRender","admin","filteredCategory","mapStateToProps","state","mapDispatchToProps","dispatch","data","propTypes","instanceOf","Array","isRequired","func","string"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { Route, Switch } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport BookList from '../BookList/BookList';\nimport BookForm from '../BookForm/BooksForm';\nimport CategoryFilter from '../../../components/CategoryFilter/CategoryFilter';\nimport { category, bookStatus } from '../../../utilities/utility';\nimport { removeBook, filterBooks } from '../../../actions/index';\n\nconst adminMainContainer = props => {\n  const {\n    books, deleteBook, filter, categoryFilter,\n  } = props;\n\n  const filteredBooks = () => {\n    let updatedBooks;\n    if (filter === 'All') {\n      updatedBooks = books;\n    } else {\n      updatedBooks = books.filter(book => book.category === filter);\n    }\n    return updatedBooks;\n  };\n\n  let componentToRender = <Redirect to=\"/\" />;\n  if (props.admin) {\n    componentToRender = (\n      <main>\n        <CategoryFilter\n          bookCategories={category}\n          categoryHandler={filteredCategory => categoryFilter(filteredCategory)}\n        />\n        <Switch>\n          <Route path=\"/auth/new-book\" exact render={() => <BookForm bookCondition={bookStatus} categories={category} />} />\n          <Route path=\"/auth\" exact render={() => <BookList deleteBook={deleteBook} availableBooks={books} />} />\n        </Switch>\n      </main>\n    );\n  }\n\n  return (\n    { componentToRender }\n  );\n};\n\n\nconst mapStateToProps = state => ({\n  books: state.books,\n  filter: state.filter,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  deleteBook: data => { dispatch(removeBook(data)); },\n  categoryFilter: category => { dispatch(filterBooks(category)); },\n});\n\n\nadminMainContainer.propTypes = {\n  books: PropTypes.instanceOf(Array).isRequired,\n  deleteBook: PropTypes.func.isRequired,\n  categoryFilter: PropTypes.func.isRequired,\n  filter: PropTypes.string.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(adminMainContainer);\n"]},"metadata":{},"sourceType":"module"}